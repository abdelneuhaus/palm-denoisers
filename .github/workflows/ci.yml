name: CI   # Nom du workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Permet d'exécuter le workflow manuellement depuis l'onglet Actions

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  Test:
    name: Tests on ${{ matrix.platform }} for Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.platform }} # Environnement (OS) de la routine
    timeout-minutes: 90             # Limite la durée de la routine
    strategy:
      fail-fast: false              # Continue les autres routines si une matrice échoue.
      matrix:                       
        platform: [windows-latest]
        python-version: ["3.9"]

    steps:
      # Récupération du dépôt dans l'environnement
      - name: Checkout code
        uses: actions/checkout@v4

      # Ajout du chemin du projet au PYTHONPATH
      - name: Add repo to PYTHON PATH
        run: echo "PYTHONPATH=${{ github.workspace }}" >> $GITHUB_ENV

      # Installation de Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # # Installation de CUDA avec sous-packages sélectionnés pour éviter le bug
      # - name: Install Cuda for DLLs
      #   uses: Jimver/cuda-toolkit@v0.2.21
      #   id: cuda-toolkit
      #   with:
      #     cuda: '12.6.0'
      #     sub-packages: '["nvcc","cudart","thrust"]'

      # # Ajout de CUDA au PATH pour éviter les problèmes de détection de nvcc
      # - name: Add CUDA to PATH
      #   run: echo "$env:CUDA_PATH\bin" >> $env:GITHUB_PATH

      # Installation des dépendances du projet
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
        # pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu126

  #     # Lancement des tests avec pytest
  #     - name: Run tests with pytest
  #       uses: aganders3/headless-gui@v2
  #       with:
  #         run: python -m pytest

  #     # Upload du test sur codecov.io (nécessite l'ajout d'une variable secrète)
  #     - name: Upload coverage report to Codecov
  #       if: matrix.platform == 'windows-latest' && matrix.python-version == '3.13'
  #       uses: codecov/codecov-action@v5
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}

  # Documentation:
  #   name: Build and Deploy Sphinx Documentation
  #   runs-on: windows-latest

  #   steps:
  #     # Récupération du dépôt dans l'environnement
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # Installation de Python
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.13'

  #     # Installation des dépendances du projet
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt

  #     # Génération de la documentation
  #     - name: Build documentation
  #       run: |
  #         sphinx-apidoc -o docs/generated ./python_tracer
  #         sphinx-build -b html docs/ docs/_build/html

  #     # Préparation des GitHub Pages.
  #     - name: Setup Pages
  #       uses: actions/configure-pages@v5

  #     # Conserve en tant qu'artefact le site généré pour une utilisation ultérieure
  #     - name: Upload documentation to GitHub Pages artifact
  #       uses: actions/upload-pages-artifact@v3
  #       with:
  #         path: 'docs/_build/html'

  #     # Déploiement sur les GitHub Pages.
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4